Description: Fix export of rhash context, containing BTIH
Origin: upstream, https://github.com/rhash/RHash/commit/633c7dd4d30d8d6f2cabb671e96e4b5df898a73d
Last-Update: 2022-06-28
Forwarded: not-needed

diff --git a/librhash/aich.c b/librhash/aich.c
--- a/librhash/aich.c
+++ b/librhash/aich.c
@@ -451,6 +451,7 @@ size_t rhash_aich_export(const aich_ctx* ctx, void* out, size_t size)
 	if (out_ptr && ARE_OPENSSL_METHODS(ctx->sha1_methods)) {
 		int* error_ptr = (int*)((char*)out + head_size + offsetof(aich_ctx, error));
 		*error_ptr |= AICH_CTX_OSSL_FLAG;
+		RHASH_ASSERT(sizeof(*error_ptr) == sizeof(ctx->error));
 	}
 #endif
 	return exported_size;
diff --git a/librhash/torrent.c b/librhash/torrent.c
--- a/librhash/torrent.c
+++ b/librhash/torrent.c
@@ -16,6 +16,7 @@
 
 #include "torrent.h"
 #include "hex.h"
+#include "util.h"
 #include <assert.h>
 #include <stddef.h>
 #include <stdlib.h>
@@ -252,7 +253,9 @@ void bt_final(torrent_ctx* ctx, unsigned char result[20])
 static int bt_str_ensure_length(torrent_ctx* ctx, size_t length)
 {
 	char* new_str;
-	if (length >= ctx->content.allocated && !ctx->error) {
+	if (ctx->error)
+		return 0;
+	if (length >= ctx->content.allocated) {
 		length++; /* allocate one character more */
 		if (length < 64) length = 64;
 		else length = (length + 255) & ~255;
@@ -525,8 +528,10 @@ static void bt_generate_torrent(torrent_ctx* ctx)
 
 	/* calculate BTIH */
 	SHA1_INIT(ctx);
-	SHA1_UPDATE(ctx, (unsigned char*)ctx->content.str + info_start_pos,
-		ctx->content.length - info_start_pos - 1);
+	if (ctx->content.str) {
+		SHA1_UPDATE(ctx, (unsigned char*)ctx->content.str + info_start_pos,
+			ctx->content.length - info_start_pos - 1);
+	}
 	SHA1_FINAL(ctx, ctx->btih);
 }
 
@@ -758,6 +763,7 @@ size_t bt_export(const torrent_ctx* ctx, void* out, size_t size)
 		if (out_ptr) {
 			if (size < exported_size)
 				return 0;
+			assert(ctx->content.str != NULL);
 			memcpy(out_ptr, ctx->content.str, ctx->content.length + 1);
 			out_ptr += aligned_length;
 		}
@@ -767,8 +773,9 @@ size_t bt_export(const torrent_ctx* ctx, void* out, size_t size)
 
 #if defined(USE_OPENSSL)
 	if (out_ptr && ARE_OPENSSL_METHODS(ctx->sha1_methods)) {
-		int* error_ptr = (int*)((char*)out + head_size + offsetof(torrent_ctx, error));
+		size_t* error_ptr = (size_t*)((char*)out + head_size + offsetof(torrent_ctx, error));
 		*error_ptr |= BT_CTX_OSSL_FLAG;
+		RHASH_ASSERT(sizeof(*error_ptr) == sizeof(ctx->error));
 	}
 #endif
 	return exported_size;
